/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 /* PICO Y PLACA QUITO-ECUADOR 
* 06/09/2021
*
*En el siguiente proyecyo existira una interfaz grafica en la cual simulara
*la restricion vehicular pico y placa en Quito - Ecuador. 
*Actualmente las restriciones son las siguientes:
*No pueden circular:
*Lunes: 0,1,2,3
*Martes:2,3,4,5
*Miercoles:4,5,6,7
*Jueves:,6,7,8,9
*Viernes0,1,8,9
*Sabado y Domingo: todos circulan
 */
package pico_y_placa;

import javax.swing.JOptionPane;

/**
 *
 * @author brand
 */
public class picoyplaca extends javax.swing.JFrame {

    /**
     * Creates new form picoyplaca
     */
    public picoyplaca() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtplaca = new javax.swing.JTextField();
        btnplaca = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fechalb = new com.toedter.calendar.JDateChooser();
        cbhora = new javax.swing.JComboBox<>();
        lblaviso = new javax.swing.JLabel();
        cbmin = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pico y Placa - Quito");

        jLabel2.setText("Ingrese su placa (ABC1234): ");

        txtplaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtplacaActionPerformed(evt);
            }
        });

        btnplaca.setText("Validar");
        btnplaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnplacaActionPerformed(evt);
            }
        });

        jLabel3.setText("Fecha: ");

        jLabel4.setText("Hora:");

        cbhora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        cbhora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbhoraActionPerformed(evt);
            }
        });

        cbmin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "10", "20", "30", "40", "50", "60" }));
        cbmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbminActionPerformed(evt);
            }
        });

        jLabel5.setText("h");

        jLabel6.setText("min");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblaviso, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel1)))
                .addGap(0, 21, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtplaca, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fechalb, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbhora, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbmin, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(btnplaca)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtplaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(fechalb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbhora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(71, 71, 71)
                .addComponent(btnplaca)
                .addGap(18, 18, 18)
                .addComponent(lblaviso)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtplacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtplacaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtplacaActionPerformed

    private void btnplacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnplacaActionPerformed
        // TODO add your handling code here:
        String placa;
        String fecha = "";
        String hora;
        String error = "";
        Double tiempo;

        //Se obtiene los datos ingresados 
        if (fechalb.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Por favor llene el campo de la FECHA", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            fecha = fechalb.getDate().toString();
        }

        placa = txtplaca.getText().toString();

        hora = cbhora.getSelectedItem().toString() + "." + cbmin.getSelectedItem().toString();
        tiempo = Double.parseDouble(hora);

        //Error si no llena el campo de placa
        if (txtplaca.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor llene el campo de la PLACA", "Error", JOptionPane.WARNING_MESSAGE);
        }

        //Se verifica que los datos ingresados tengan el tamaÃ±o de 6 o 7 como estipula en las placas de Ecuador
        if (placa.length() >= 6 && placa.length() <= 7) {

            String letras = placa.substring(0, 3);

            //Se comprueba que los 3 primeros caracteres sean letras
            if (comprobarletras(letras)) {

                String numeros = placa.substring(3, placa.length());
                //se comprueba que los ultimos caracteres sean numeros
                if (comprobarnumeros(numeros)) {
                    fecha = fecha.substring(0, 3);
                    lblaviso.setText(circulacion(placa, fecha, tiempo));

                } else {
                    error = "Formato Invalido. Solo numeros 4 ultimo caracteres";
                }
            } else {
                error = "Formato Invalido, tres primeros caracteres deben ser letras y mayusculas ";
            }
        } else {
            error = "Formato invalido de la Placa";
        }
        //condicional para que imprima los errores 
        if (error != "") {
            lblaviso.setText(error);
        }


    }//GEN-LAST:event_btnplacaActionPerformed

    private void cbhoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbhoraActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_cbhoraActionPerformed

    private void cbminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(picoyplaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(picoyplaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(picoyplaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(picoyplaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new picoyplaca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnplaca;
    private javax.swing.JComboBox<String> cbhora;
    private javax.swing.JComboBox<String> cbmin;
    private com.toedter.calendar.JDateChooser fechalb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblaviso;
    private javax.swing.JTextField txtplaca;
    // End of variables declaration//GEN-END:variables

    private boolean comprobarletras(String letras) {

        boolean a = true;
        int inicio = 0;
        int fin = letras.length();
        //recorre las letras
        while (inicio < fin) {
            String letra = letras.substring(inicio, inicio + 1);
            //condicional para verificar las letras mayusculas
            if (letra.equals("A") || letra.equals("B") || letra.equals("C") || letra.equals("D") || letra.equals("E") || letra.equals("F") || letra.equals("G")
                    || letra.equals("H") || letra.equals("I") || letra.equals("J") || letra.equals("K") || letra.equals("L") || letra.equals("M") || letra.equals("N")
                    || letra.equals("O") || letra.equals("P") || letra.equals("Q") || letra.equals("R") || letra.equals("S") || letra.equals("T") || letra.equals("U")
                    || letra.equals("V") || letra.equals("W") || letra.equals("X") || letra.equals("Y") || letra.equals("Z")) {

            } else {

                a = false;
                break;
            }
            inicio++;
        }
        return a;

    }

    private boolean comprobarnumeros(String numeros) {
        boolean a = true;
        int inicio = 0;
        int fin = numeros.length();
        //recorre los numeros
        while (inicio < fin) {
            String numero = numeros.substring(inicio, inicio + 1);
            //condicional para verificar los numeros
            if (numero.equals("1") || numero.equals("2") || numero.equals("3") || numero.equals("4") || numero.equals("5") || numero.equals("6") || numero.equals("7") || numero.equals("8")
                    || numero.equals("9") || numero.equals("10") || numero.equals("0")) {

            } else {

                a = false;
                break;
            }
            inicio++;
        }
        return a;
    }

    private String circulacion(String placa, String fecha, Double tiempo) {

        String ultimodigito = placa.substring(placa.length() - 1);
        String mensaje = " ";

        //Control para cada dia de la semana y para restriccion del ultimo digito de la placa. 
        switch (fecha) {
            case "Mon":
//Condicional para verificar la hora en la que se desea ciruclar
                if (tiempo >= 7.0 && tiempo <= 9.3 || tiempo >= 16.0 && tiempo <= 19.3) {
//Condicional para verificar el ultimo digito de la placa acorde al dia
                    if (ultimodigito.equals("0") || ultimodigito.equals("1") || ultimodigito.equals("2") || ultimodigito.equals("3")) {
                        mensaje = "NO PUEDE CIRCULAR";

                    } else {
                        mensaje = "SI PUEDE CIRCULAR";
                    }
                } else {
                    mensaje = "NO SE ENCUENTRA EN HORARIO DE RESTRICCION, PUEDE CIRCULAR";
                }

                break;
            case "Tue":
                if (tiempo >= 7.0 && tiempo <= 9.3 || tiempo >= 16.0 && tiempo <= 19.3) {

                    if (ultimodigito.equals("2") || ultimodigito.equals("3") || ultimodigito.equals("4") || ultimodigito.equals("5")) {
                        mensaje = "NO PUEDE CIRCULAR";

                    } else {
                        mensaje = "SI PUEDE CIRCULAR";
                    }
                } else {
                    mensaje = "NO SE ENCUENTRA EN HORARIO DE RESTRICCION, PUEDE CIRCULAR";
                }

                break;
            case "Wed":
                if (tiempo >= 7.0 && tiempo <= 9.3 || tiempo >= 16.0 && tiempo <= 19.3) {

                    if (ultimodigito.equals("4") || ultimodigito.equals("5") || ultimodigito.equals("6") || ultimodigito.equals("7")) {
                        mensaje = "NO PUEDE CIRCULAR";

                    } else {
                        mensaje = "SI PUEDE CIRCULAR";
                    }
                } else {
                    mensaje = "NO SE ENCUENTRA EN HORARIO DE RESTRICCION, PUEDE CIRCULAR";
                }
                break;
            case "Thu":
                if (tiempo >= 7.0 && tiempo <= 9.3 || tiempo >= 16.0 && tiempo <= 19.3) {

                    if (ultimodigito.equals("6") || ultimodigito.equals("7") || ultimodigito.equals("8") || ultimodigito.equals("9")) {
                        mensaje = "NO PUEDE CIRCULAR";

                    } else {
                        mensaje = "SI PUEDE CIRCULAR";
                    }
                } else {
                    mensaje = "NO SE ENCUENTRA EN HORARIO DE RESTRICCION, PUEDE CIRCULAR";
                }
                break;
            case "Fri":
                if (tiempo >= 7.0 && tiempo <= 9.3 || tiempo >= 16.0 && tiempo <= 19.3) {

                    if (ultimodigito.equals("0") || ultimodigito.equals("1") || ultimodigito.equals("8") || ultimodigito.equals("9")) {
                        mensaje = "NO PUEDE CIRCULAR";

                    } else {
                        mensaje = "SI PUEDE CIRCULAR";
                    }
                } else {
                    mensaje = "NO SE ENCUENTRA EN HORARIO DE RESTRICCION, PUEDE CIRCULAR";
                }
                break;
            case "Sat":

                mensaje = "SI PUEDE CIRCULAR, NO HAY RESTRICCION";
                break;
            case "Sun":
                mensaje = "SI PUEDE CIRCULAR, NO HAY RESTRICCION";
                break;

        }
        return mensaje;
    }
}
